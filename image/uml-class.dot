digraph G
{
	//fontname="Source Code Pro"
	//node [fontname="Source Code Pro"]
	//edge [fontname="Source Code Pro"]
	rankdir=BT

	node [shape="none"]

	subgraph cluster_dataflow
	{
		label = "namespace dataflow"
		color = "blue"

		analyzer
		[
			label = <
				<table cellspacing="0" border="1" cellborder="0" cellpadding="4">
					<tr><td align="center">Analyzer</td></tr>
					<hr/>
					<tr><td align="left"># _edge : pair&lt;_node, _node&gt;</td></tr>
					<tr><td align="left"># _edge_attr : pair&lt;_edge, int&gt;</td></tr>
					<tr><td align="left"># _edge_list : set&lt;_edge_attr&gt;</td></tr>
					<tr><td align="left"># _node : set&lt;llvm::Value*&gt;</td></tr>
					<tr><td align="left"># _node_attr : pair&lt;_node, int&gt;</td></tr>
					<tr><td align="left"># _node_list : set&lt;_node_attr&gt;</td></tr>
					<hr/>
					<tr><td align="left">- _merge() : void</td></tr>
					<tr><td align="left"># Analyze(llvm::Function&amp;) : void</td></tr>
				</table>
			>
		]

		dumpdot
		[
			label = <
				<table cellspacing="0" border="1" cellborder="0" cellpadding="4">
					<tr><td align="center">AnalyzeToDot</td></tr>
					<hr/>
					<tr><td align="left">- _target : ofstream</td></tr>
					<tr><td align="left">+ ID : static char</td></tr>
					<hr/>
					<tr><td align="left">- _export() : void</td></tr>
					<tr><td align="left">+ runOnFunction(llvm::Function&amp;) : bool</td></tr>
				</table>
			>
		]

		dumppnet
		[
			label = <
				<table cellspacing="0" border="1" cellborder="0" cellpadding="4">
					<tr><td align="center">AnalyzeToPNet</td></tr>
					<hr/>
					<tr><td align="left">- _target : ofstream</td></tr>
					<tr><td align="left">+ ID : static char</td></tr>
					<hr/>
					<tr><td align="left">- _export() : void</td></tr>
					<tr><td align="left">+ runOnFunction(llvm::Function&amp;) : bool</td></tr>
				</table>
			>
		]
		

	}

	subgraph cluster_llvm
	{
		label = "namespace llvm"
		color = "grey"

		funcpass
		[
			label = <
				<table cellspacing="0" border="0" cellborder="1" cellpadding="4">
					<tr><td align="center">FunctionPass</td></tr>
					<tr><td align="left"><i>+ ID : static char</i></td></tr>
					<tr><td align="left"><i>+ runOnFunction(llvm::Function&amp;) : bool</i></td></tr>
				</table>
			>
		]
	}

	strutil
	[
		label = <
			<table cellspacing="0" border="1" cellborder="0" cellpadding="4">
				<tr><td align="center">namespace str_util</td></tr>
				<hr/>
				<tr><td></td></tr>
				<hr/>
				<tr><td align="left">to_string(T) : string</td></tr>
				<tr><td align="left">adler32(const void*, size_t) : uint32</td></tr>
				<tr><td align="left">adler32_str(const string&amp;) : string</td></tr>
			</table>
		>
	]

	llvmutil
	[
		label = <
			<table cellspacing="0" border="1" cellborder="0" cellpadding="4">
				<tr><td align="center">namespace LLVMUtil</td></tr>
				<hr/>
				<tr><td></td></tr>
				<hr/>
				<tr><td align="left">TypeToStr(const llvm::Type*) : string</td></tr>
				<tr><td align="left">InstToStr(const llvm::Instruction*) : string</td></tr>
				<tr><td align="left">DemangleName(const string&amp;) : string</td></tr>
				<tr><td align="left">GetVarName(const llvm::Value*) : string</td></tr>
				<tr><td align="left">GetVarDescript(const llvm::Value*) : string</td></tr>
			</table>
		>
	]

	dumpdot -> funcpass [arrowhead="empty"]
	dumpdot -> analyzer [arrowhead="empty"]

	dumppnet -> funcpass [arrowhead="empty"]
	dumppnet -> analyzer [arrowhead="empty"]

	analyzer -> strutil  [arrowhead="vee" style="dashed"]
	analyzer -> llvmutil [arrowhead="vee" style="dashed"]

}
